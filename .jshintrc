// ENFORCING OPTIONS
// These options tell JSHint to be more strict towards your code. Use them if
// you want to allow only a safe subset of JavaScript—very useful when your
// codebase is shared with a big number of developers with different skill
// levels.

// prohibits the use of bitwise operators such as ^ (XOR), | (OR) and others
  "bitwise":        true,
// force all variable names to use either camelCase style or UPPER_CASE with
// underscores
  "camelcase":      true,
// requires you to always put curly braces around blocks in loops and
// conditionals
  "curly":          true,
// prohibits the use of == and != in favor of === and !==
  "eqeqeq":         true,
// tells JSHint that your code needs to adhere to ECMAScript 3 specification
  "es3":            false,
// requires all `for in` loops to filter object's items with `hasOwnProperty()`
  "forin":          true,
// prohibits the use of immediate function invocations without wrapping them in
// parentheses
  "immed":          true,
// enforces specific tab width
  "indent":         2,
// prohibits the use of a variable before it was defined
  "latedef":        true,
// requires you to capitalize names of constructor functions
  "newcap":         true,
// prohibits the use of `arguments.caller` and `arguments.callee`
  "noarg":          true,
// warns when you have an empty block in your code
  "noempty":        true,
// prohibits the use of constructor functions for side-effects
  "nonew":          true,
// prohibits the use of unary increment and decrement operators
  "plusplus":       false,
// enforces the consistency of quotation marks used throughout your code
  "quotmark":       true,
// prohibits the use of explicitly undeclared variables
  "undef":          true,
// warns when you define and never use your variables
  "unused":         true,
// requires all functions to run in ECMAScript 5's strict mode
  "strict":         true,
// makes it an error to leave a trailing whitespace in your code
  "trailing":       true,
// set the max number of formal parameters allowed per function
  "maxparams":      4,
// control how nested do you want your blocks to be
  "maxdepth":       3,
// set the max number of statements allowed per function
  //"maxstatements":  0,
// control cyclomatic complexity throughout your code
  //"maxcomplexity":  0,
// set the maximum length of a line
  "maxlen":         120,

// RELAXING OPTIONS
// These options allow you to suppress certain types of warnings. Use them
// only if you are absolutely positive that you know what you are doing.

// suppresses warnings about missing semicolons
  "asi":            false,
// suppresses warnings about the use of assignments in cases where comparisons
// are expected
  "boss":           false,
// suppresses warnings about the debugger statements in your code
  "debug":          false,
// suppresses warnings about == null comparisons
  "eqnull":         false,
// your code uses ES.next specific features such as const
  "esnext":         true,
// suppresses warnings about the use of eval
  "evil":           false,
// suppresses warnings about the use of expressions where normally you would
// expect to see assignments or function calls
  "expr":           false,
// suppresses warnings about declaring variables inside of control structures
// while accessing them later from the outside
  "funcscope":      false,
// suppresses warnings about the use of global strict mode
  "globalstrict":   false,
// suppresses warnings about the `__iterator__` property
  "iterator":       false,
// suppresses warnings about missing semicolons, but only when the semicolon is
// omitted for the last statement in a one-line block
  "lastsemic":      false,
// suppresses most of the warnings about possibly unsafe line breakings in your
// code
  "laxbreak":       false,
// suppresses warnings about comma-first coding style
  "laxcomma":       false,
// suppresses warnings about functions inside of loops
  "loopfunc":       false,
// tells JSHint that your code uses Mozilla JavaScript extensions
  "moz":            false,
// suppresses warnings about multi-line strings
  "multistr":       false,
// suppresses warnings about the `__proto__` property
  "proto":          false,
// suppresses warnings about the use of script-targeted URLs—such as
// `javascript:...`
  "scripturl":      false,
// suppresses warnings about mixed tabs and spaces when the latter are used for
// alignmnent only
  "smarttabs":      false,
// suppresses warnings about variable shadowing
  "shadow":         false,
// suppresses warnings about using `[]` notation when it can be expressed in dot notation
  "sub":            false,
// suppresses warnings about "weird" constructions like
// `new function () { ... }` and `new Object;`
  "supernew":       false,
// suppresses warnings about possible strict violations when the code is running
// in strict mode and you use `this` in a non-constructor function
  "validthis":      false,

// ENVIRONMENTS
// These options pre-define global variables that are exposed by popular
// JavaScript libraries and runtime environments—such as browser or node.js.
// Essentially they are shortcuts for explicit declarations like
// /*global $:false, jQuery:false */

// defines globals exposed by modern browsers
  "browser":        true,
// defines globals exposed by CouchDB
  "couch":          false,
// defines globals that are usually used for logging poor-man's debugging:
// `console`, `alert`, etc.
  "devel":          true,
// defines globals exposed by the Dojo Toolkit
  "dojo":           false,
// defines globals exposed by the jQuery JavaScript library
  "jquery":         true,
// defines globals exposed by the MooTools JavaScript framework
  "mootools":       false,
// defines globals available when your code is running inside of the Node
// runtime environment
  "node":           true,
// defines non-standard but widely adopted globals such as `escape` and 
// `unescape`
  "nonstandard":    false,
// defines globals available when your core is running inside of the PhantomJS
// runtime environment
  "phantom":        false,
// defines globals exposed by the Prototype JavaScript framework
  "prototypejs":    false,
// defines globals available when your code is running inside of the Rhino
// runtime environment
  "rhino":          false,
// defines globals available when your code is running inside of a Web Worker
  "worker":         true,
// defines globals available when your code is running as a script for the
// Windows Script Host
  "wsh":            false,
// defines globals exposed by the YUI JavaScript framework
  "yui":            false,

// LEGACY
// These options are legacy from JSLint. Aside from bug fixes they will not
// be improved in any way and might be removed at any point.

// disallows the use of dangling `_` in variables
  "nomen":          false,
// allows only one `var` statement per function
  "onevar":         false,
// makes JSHint stop on the first error or warning
  "passfail":       false,
// make JSHint check your source code against Douglas Crockford's JavaScript
// coding style
  "white":          false
}
